# coding: utf-8

"""
    Strava API v3

    Strava API  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.lat_lng import LatLng  # noqa: F401,E501
from swagger_client.models.polyline_map import PolylineMap  # noqa: F401,E501
from swagger_client.models.summary_segment import SummarySegment  # noqa: F401,E501
from swagger_client.models.summary_segment_effort import SummarySegmentEffort  # noqa: F401,E501


class DetailedSegment(SummarySegment):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'total_elevation_gain': 'float',
        'map': 'PolylineMap',
        'effort_count': 'int',
        'athlete_count': 'int',
        'hazardous': 'bool',
        'star_count': 'int'
    }

    attribute_map = {
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'total_elevation_gain': 'total_elevation_gain',
        'map': 'map',
        'effort_count': 'effort_count',
        'athlete_count': 'athlete_count',
        'hazardous': 'hazardous',
        'star_count': 'star_count'
    }

    def __init__(self, created_at=None, updated_at=None, total_elevation_gain=None, map=None, effort_count=None, athlete_count=None, hazardous=None, star_count=None):  # noqa: E501
        """DetailedSegment - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._updated_at = None
        self._total_elevation_gain = None
        self._map = None
        self._effort_count = None
        self._athlete_count = None
        self._hazardous = None
        self._star_count = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if total_elevation_gain is not None:
            self.total_elevation_gain = total_elevation_gain
        if map is not None:
            self.map = map
        if effort_count is not None:
            self.effort_count = effort_count
        if athlete_count is not None:
            self.athlete_count = athlete_count
        if hazardous is not None:
            self.hazardous = hazardous
        if star_count is not None:
            self.star_count = star_count

    @property
    def created_at(self):
        """Gets the created_at of this DetailedSegment.  # noqa: E501

        The time at which the segment was created.  # noqa: E501

        :return: The created_at of this DetailedSegment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DetailedSegment.

        The time at which the segment was created.  # noqa: E501

        :param created_at: The created_at of this DetailedSegment.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DetailedSegment.  # noqa: E501

        The time at which the segment was last updated.  # noqa: E501

        :return: The updated_at of this DetailedSegment.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DetailedSegment.

        The time at which the segment was last updated.  # noqa: E501

        :param updated_at: The updated_at of this DetailedSegment.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def total_elevation_gain(self):
        """Gets the total_elevation_gain of this DetailedSegment.  # noqa: E501

        The segment's total elevation gain.  # noqa: E501

        :return: The total_elevation_gain of this DetailedSegment.  # noqa: E501
        :rtype: float
        """
        return self._total_elevation_gain

    @total_elevation_gain.setter
    def total_elevation_gain(self, total_elevation_gain):
        """Sets the total_elevation_gain of this DetailedSegment.

        The segment's total elevation gain.  # noqa: E501

        :param total_elevation_gain: The total_elevation_gain of this DetailedSegment.  # noqa: E501
        :type: float
        """

        self._total_elevation_gain = total_elevation_gain

    @property
    def map(self):
        """Gets the map of this DetailedSegment.  # noqa: E501


        :return: The map of this DetailedSegment.  # noqa: E501
        :rtype: PolylineMap
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this DetailedSegment.


        :param map: The map of this DetailedSegment.  # noqa: E501
        :type: PolylineMap
        """

        self._map = map

    @property
    def effort_count(self):
        """Gets the effort_count of this DetailedSegment.  # noqa: E501

        The total number of efforts for this segment  # noqa: E501

        :return: The effort_count of this DetailedSegment.  # noqa: E501
        :rtype: int
        """
        return self._effort_count

    @effort_count.setter
    def effort_count(self, effort_count):
        """Sets the effort_count of this DetailedSegment.

        The total number of efforts for this segment  # noqa: E501

        :param effort_count: The effort_count of this DetailedSegment.  # noqa: E501
        :type: int
        """

        self._effort_count = effort_count

    @property
    def athlete_count(self):
        """Gets the athlete_count of this DetailedSegment.  # noqa: E501

        The number of unique athletes who have an effort for this segment  # noqa: E501

        :return: The athlete_count of this DetailedSegment.  # noqa: E501
        :rtype: int
        """
        return self._athlete_count

    @athlete_count.setter
    def athlete_count(self, athlete_count):
        """Sets the athlete_count of this DetailedSegment.

        The number of unique athletes who have an effort for this segment  # noqa: E501

        :param athlete_count: The athlete_count of this DetailedSegment.  # noqa: E501
        :type: int
        """

        self._athlete_count = athlete_count

    @property
    def hazardous(self):
        """Gets the hazardous of this DetailedSegment.  # noqa: E501

        Whether this segment is considered hazardous  # noqa: E501

        :return: The hazardous of this DetailedSegment.  # noqa: E501
        :rtype: bool
        """
        return self._hazardous

    @hazardous.setter
    def hazardous(self, hazardous):
        """Sets the hazardous of this DetailedSegment.

        Whether this segment is considered hazardous  # noqa: E501

        :param hazardous: The hazardous of this DetailedSegment.  # noqa: E501
        :type: bool
        """

        self._hazardous = hazardous

    @property
    def star_count(self):
        """Gets the star_count of this DetailedSegment.  # noqa: E501

        The number of stars for this segment  # noqa: E501

        :return: The star_count of this DetailedSegment.  # noqa: E501
        :rtype: int
        """
        return self._star_count

    @star_count.setter
    def star_count(self, star_count):
        """Sets the star_count of this DetailedSegment.

        The number of stars for this segment  # noqa: E501

        :param star_count: The star_count of this DetailedSegment.  # noqa: E501
        :type: int
        """

        self._star_count = star_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetailedSegment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailedSegment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

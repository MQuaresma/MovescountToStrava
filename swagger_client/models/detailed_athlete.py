# coding: utf-8

"""
    Strava API v3

    Strava API  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.summary_athlete import SummaryAthlete  # noqa: F401,E501
from swagger_client.models.summary_club import SummaryClub  # noqa: F401,E501
from swagger_client.models.summary_gear import SummaryGear  # noqa: F401,E501


class DetailedAthlete(SummaryAthlete):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'follower_count': 'int',
        'friend_count': 'int',
        'mutual_friend_count': 'int',
        'measurement_preference': 'str',
        'ftp': 'int',
        'weight': 'float',
        'clubs': 'list[SummaryClub]',
        'bikes': 'list[SummaryGear]',
        'shoes': 'list[SummaryGear]'
    }

    attribute_map = {
        'follower_count': 'follower_count',
        'friend_count': 'friend_count',
        'mutual_friend_count': 'mutual_friend_count',
        'measurement_preference': 'measurement_preference',
        'ftp': 'ftp',
        'weight': 'weight',
        'clubs': 'clubs',
        'bikes': 'bikes',
        'shoes': 'shoes'
    }

    def __init__(self, follower_count=None, friend_count=None, mutual_friend_count=None, measurement_preference=None, ftp=None, weight=None, clubs=None, bikes=None, shoes=None):  # noqa: E501
        """DetailedAthlete - a model defined in Swagger"""  # noqa: E501
        self._follower_count = None
        self._friend_count = None
        self._mutual_friend_count = None
        self._measurement_preference = None
        self._ftp = None
        self._weight = None
        self._clubs = None
        self._bikes = None
        self._shoes = None
        self.discriminator = None
        if follower_count is not None:
            self.follower_count = follower_count
        if friend_count is not None:
            self.friend_count = friend_count
        if mutual_friend_count is not None:
            self.mutual_friend_count = mutual_friend_count
        if measurement_preference is not None:
            self.measurement_preference = measurement_preference
        if ftp is not None:
            self.ftp = ftp
        if weight is not None:
            self.weight = weight
        if clubs is not None:
            self.clubs = clubs
        if bikes is not None:
            self.bikes = bikes
        if shoes is not None:
            self.shoes = shoes

    @property
    def follower_count(self):
        """Gets the follower_count of this DetailedAthlete.  # noqa: E501

        The athlete's follower count.  # noqa: E501

        :return: The follower_count of this DetailedAthlete.  # noqa: E501
        :rtype: int
        """
        return self._follower_count

    @follower_count.setter
    def follower_count(self, follower_count):
        """Sets the follower_count of this DetailedAthlete.

        The athlete's follower count.  # noqa: E501

        :param follower_count: The follower_count of this DetailedAthlete.  # noqa: E501
        :type: int
        """

        self._follower_count = follower_count

    @property
    def friend_count(self):
        """Gets the friend_count of this DetailedAthlete.  # noqa: E501

        The athlete's friend count.  # noqa: E501

        :return: The friend_count of this DetailedAthlete.  # noqa: E501
        :rtype: int
        """
        return self._friend_count

    @friend_count.setter
    def friend_count(self, friend_count):
        """Sets the friend_count of this DetailedAthlete.

        The athlete's friend count.  # noqa: E501

        :param friend_count: The friend_count of this DetailedAthlete.  # noqa: E501
        :type: int
        """

        self._friend_count = friend_count

    @property
    def mutual_friend_count(self):
        """Gets the mutual_friend_count of this DetailedAthlete.  # noqa: E501

        The number or athletes mutually followed by this athlete and the currently logged-in athlete.  # noqa: E501

        :return: The mutual_friend_count of this DetailedAthlete.  # noqa: E501
        :rtype: int
        """
        return self._mutual_friend_count

    @mutual_friend_count.setter
    def mutual_friend_count(self, mutual_friend_count):
        """Sets the mutual_friend_count of this DetailedAthlete.

        The number or athletes mutually followed by this athlete and the currently logged-in athlete.  # noqa: E501

        :param mutual_friend_count: The mutual_friend_count of this DetailedAthlete.  # noqa: E501
        :type: int
        """

        self._mutual_friend_count = mutual_friend_count

    @property
    def measurement_preference(self):
        """Gets the measurement_preference of this DetailedAthlete.  # noqa: E501

        The athlete's preferred unit system.  # noqa: E501

        :return: The measurement_preference of this DetailedAthlete.  # noqa: E501
        :rtype: str
        """
        return self._measurement_preference

    @measurement_preference.setter
    def measurement_preference(self, measurement_preference):
        """Sets the measurement_preference of this DetailedAthlete.

        The athlete's preferred unit system.  # noqa: E501

        :param measurement_preference: The measurement_preference of this DetailedAthlete.  # noqa: E501
        :type: str
        """
        allowed_values = ["feet", "meters"]  # noqa: E501
        if measurement_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `measurement_preference` ({0}), must be one of {1}"  # noqa: E501
                .format(measurement_preference, allowed_values)
            )

        self._measurement_preference = measurement_preference

    @property
    def ftp(self):
        """Gets the ftp of this DetailedAthlete.  # noqa: E501

        The athlete's FTP (Functional Threshold Power).  # noqa: E501

        :return: The ftp of this DetailedAthlete.  # noqa: E501
        :rtype: int
        """
        return self._ftp

    @ftp.setter
    def ftp(self, ftp):
        """Sets the ftp of this DetailedAthlete.

        The athlete's FTP (Functional Threshold Power).  # noqa: E501

        :param ftp: The ftp of this DetailedAthlete.  # noqa: E501
        :type: int
        """

        self._ftp = ftp

    @property
    def weight(self):
        """Gets the weight of this DetailedAthlete.  # noqa: E501

        The athlete's weight.  # noqa: E501

        :return: The weight of this DetailedAthlete.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this DetailedAthlete.

        The athlete's weight.  # noqa: E501

        :param weight: The weight of this DetailedAthlete.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def clubs(self):
        """Gets the clubs of this DetailedAthlete.  # noqa: E501

        The athlete's clubs.  # noqa: E501

        :return: The clubs of this DetailedAthlete.  # noqa: E501
        :rtype: list[SummaryClub]
        """
        return self._clubs

    @clubs.setter
    def clubs(self, clubs):
        """Sets the clubs of this DetailedAthlete.

        The athlete's clubs.  # noqa: E501

        :param clubs: The clubs of this DetailedAthlete.  # noqa: E501
        :type: list[SummaryClub]
        """

        self._clubs = clubs

    @property
    def bikes(self):
        """Gets the bikes of this DetailedAthlete.  # noqa: E501

        The athlete's bikes.  # noqa: E501

        :return: The bikes of this DetailedAthlete.  # noqa: E501
        :rtype: list[SummaryGear]
        """
        return self._bikes

    @bikes.setter
    def bikes(self, bikes):
        """Sets the bikes of this DetailedAthlete.

        The athlete's bikes.  # noqa: E501

        :param bikes: The bikes of this DetailedAthlete.  # noqa: E501
        :type: list[SummaryGear]
        """

        self._bikes = bikes

    @property
    def shoes(self):
        """Gets the shoes of this DetailedAthlete.  # noqa: E501

        The athlete's shoes.  # noqa: E501

        :return: The shoes of this DetailedAthlete.  # noqa: E501
        :rtype: list[SummaryGear]
        """
        return self._shoes

    @shoes.setter
    def shoes(self, shoes):
        """Sets the shoes of this DetailedAthlete.

        The athlete's shoes.  # noqa: E501

        :param shoes: The shoes of this DetailedAthlete.  # noqa: E501
        :type: list[SummaryGear]
        """

        self._shoes = shoes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetailedAthlete, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailedAthlete):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
